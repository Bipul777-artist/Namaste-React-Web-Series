Q Is JSX required in React?

Ans ->  No, JSX is not required for using React.
Each JSX element is just syntactic sugar for calling React.createElement(component, props,..children). 
So, anything we can do with JSX can also be done with vanilla JS.

Q. Is ES6 mandatory for React?

Ans ->  No, it's not required but it makes our job easier if we know ES6.

Q. {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX?

Ans:  The Difference is stated below:

    {TitleComponent}: This value describes the TitleComponent as a javascript expression or a variable. The {} can embed a javascript expression or a variable inside it.
    <TitleComponent/> : This value represents a Component that is basically returning Some JSX value. In simple terms TitleComponent a function that is returning a JSX value. A component is written inside the {<  />} expression.
    <TitleComponent></TitleComponent> : <TitleComponent /> and <TitleComponent></TitleComponent> are equivalent only when < TitleComponent /> has no child components. The opening and closing tags are created to include the child components.


Q.How can i write comments in jsx

Ans ->  {/* This is a JSX comment */} 

Q. What is <react.fragment></react.fragment> and <></>

Ans: React Fragment is a feature in React that allows us to return multiple elements from a React component by allowing us to group a list of children without adding extra nodes to the DOM.

Q. What is Virtual DOM.

Ans ->  The Virtual DOM is a programming concept where an ideal or "virtual" representation of a UI is 
kept in memory and synced with real DOM by a library ReactDOM, this process is called Reconciliation.
Since "virtual DOM" is more of a pattern than a specific technology, people sometimes say it to
mean different things. In React world, the term "Virtual DOM" is ussually associated with React
elements since they are the objects representing the user interface. React, however, also uses 
internal objects called "fibers" to hold additional info about the component tree. They may also be considered a part of "virtual DOM" implementation in React.

**Component Tree -> A React tree view component is a graphical user interface component that  represents a hierarchical view of info, where each item can have several subitems.

Q what is reconciliation in react?

Ans ->  Reconciliation is the process through which react updates the browser DOM. React only updates the part of tree which is changed. The algorithm React uses to diff one tree with another to determine which parts need to be changed

Reference -> https://github.com/acdlite/react-fiber-architecture

Q Why we need keys in react? When do we need it?

Ans ->  React reconciliation engine identifies the changes that needs to be re-rendered using keys. Hence it's important to provide them.
We need keys when we make changes to our code. Basically they are required. 

Q Can we use index as a key?

Ans -> It's not recommended to use index as key. We should use unique items as key.
No Key << Index Key <<<<< Unique Key

Q What is props in React?

Ans -> Props are arguments passed inside React components. Props are Read-only. 
**All React components must act like pure functions. In the context of React, a pure function component should behave consistently based on its props and state.

Q. What is Config Driven UI?

Ans -> Config drivern UI is a technique that allows us to create user interfaces based on a config file like JSON or Typescript files that describe the layout or contents of UI components. Instead of
writing each component individually, we can use a JSON file which has all the configurations. We can create a custom component which will read the JSON and render UI accrodingly.

Q. What is Optional Chaining?

Ans -> The Optional Chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called is undefined or null, it returns undefined instead of throwing an error.
