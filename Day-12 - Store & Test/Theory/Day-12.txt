Q. UseContext VS UseRedux?

Ans: UseContext and Redux are both tools used for state management
in React applications, but they serve different purposes and
have different use cases.

UseContext can be used for managing state within a component tree. It gives us the option to access the value of a context directly within a component and it's descandants.  It's typically used for smaller-scale statemanagement needs within a component or a small section of the application. It's seamlessly integrated into React and works well with the
component lifecycle. UseContext comes internally from React hence it's easy to integrate UseContext before using it.

Redux:
Scope î‚’ Redux is a state management library that provides a global state container
for the entire application. It allows you to manage the application state in a predictable and centralized manner.  Redux is complex in architecture as it introduces a bunch of new terms/ concepts like Dispatch, Selector and Reducer function. However using Redux is useful for managing state of large scale apps. Redux needs to be integrated separetly to our apps.

https://www.freecodecamp.org/news/what-is-redux-store-actions-reducers-explained/
Q.  Advantages of using Redux Toolkit over Redux?

Ans: RTK makes it easier for us to use Redux by reducing boiler plate code, making faster deployment and less configuration. The best thing about RTK is DevTools. Redux Toolkit is like a set of tools that makes working with Redux
easier. It simplifies common tasks, reduces the amount of code you need to write,
and encourages good coding practices

Q. Explain Dispatcher ?

Ans: In Redux, a dispatcher is not a standalone concept; instead, it's a term often used to refer to a function called dispatch. The dispatch function is a key part of the Redux store, and it plays a
crucial role in the Redux data flow.

We use dispatch to send action to data store. The dispatch function is also a crucial point in the Redux middleware
chain. Middleware can intercept actions before they reach the reducer or modify
actions on the way out. Middleware functions receive the dispatch function,
allowing them to either pass the action along or stop it.

Q.  Explain Reducer?

Ans: In Redux Toolkit, the createSlice function is commonly used to create
reducers . It simplifies the process of defining actions and the
corresponding reducer logic, reducing boilerplate code.

In simple words, Reducer is a function which runs after an action is dispatched in Redux. The job of Reducer is to update the slice, to do this Reducer takes two arguments - current state of the component/object and action to be performed. State in redux is READ-ONLY which means we cannot update them directly hence this architecture of dispatch action and reducers are required. 

State in Redux is also Immutable and Redux addresses this issue with the help of Immer. Even though we're editing state on the fly, BTS Redux is using Immer to create a new object, update the state in it and return.

Q. Explain Slice?

Ans: Slice is a logical separation of related data in Redux Store. Slices are created using the createSlice utility function provided by Redux Toolkit. The primary purpose of slices is to encapsulate the logic related to a specific part of the state, making the code more modular and easier to manage.
Using slices in Redux Toolkit promotes a modular and organized approach to state
management . Each slice encapsulates the logic related to a specific part of the state,
making it easier to understand, maintain, and scale your Redux code.

Q. Explain Selector?

Ans: If we want to read the data in the respective slice inside Redux store, it will happen though a Selector and this process is know as Subscribing to Store. To read data using Selector, we will have to use a hook which takes a CB function with the location of slice we want to read.
	const data = useSelector((store) => store.cart.items)

Q. Explain createSlice and the configuration it  takes?

Ans: CreateSlice is a utility function provided by Redux Toolkit that
simplifies the process of creating Redux slices . A Redux slice is a
piece of the Redux store that includes a set of actions, a reducer, and
an initial state . The createSlice function helps reduce
boilerplate code associated with defining actions and the
reducer for a specific slice of your Redux store.
Here's an explanation of the configuration options that createSlice takes:
ðŸ“¢ Syntax:
createSlice(options)
ðŸ“¢ Configuration Options:
1 name (string) î‚’ A string that identifies the slice. This is used as the prefix for the
generated action types.
const mySlice = createSlice({
name: 'mySlice',
// ... other options
});
2 initialState (any) î‚’ The initial state value for the slice. This is the starting point for
your state before any actions are dispatched.
const mySlice = createSlice({
initialState: { value: 0 },
// ... other options
});
Episode-12 | LetÊ¼s Build Our Store153 reducers (object) î‚’ An object where each key-value pair represents a reducer
function. The keys are the names of the actions, and the values are the
corresponding reducer logic.
const mySlice = createSlice({
reducers: {
increment: (state) => {
state.value += 1;
},
decrement: (state) => {
state.value -= 1;
},
},
// ... other options
});

Q. Explain Middleware?

Ans: https://redux.js.org/tutorials/fundamentals/part-4-store